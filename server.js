const express = require('express');
const cors = require('cors');
const sqlite3 = require('sqlite3').verbose();
const bcrypt = require('bcrypt');
const multer = require('multer');
const path = require('path');

const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

const app = express();
const adminCodes = {};

app.use(cors());
app.use(express.json());
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));
const TELEGRAM_BOT_TOKEN = '8195401830:AAHOJLrlYdzMdIzIRvSBObnvpicId-nFjn8';
const TELEGRAM_CHAT_ID = '1164239455'; 

// –†–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.use(express.static(path.join(__dirname)));

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database('./studentdb.sqlite', (err) => {
  if (err) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err.message);
  } else {
    console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞');
  }
});

app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'login.html'));
});

app.post('/api/admin-login', (req, res) => {
  const { login, password } = req.body;

  db.get('SELECT * FROM administrators WHERE login = ?', [login], async (err, admin) => {
    if (err || !admin) return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    const match = await bcrypt.compare(password, admin.password);
    if (!match) return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });

    const code = Math.floor(100000 + Math.random() * 900000).toString();
    const tempToken = Date.now() + '_' + Math.random().toString(36).substring(2);
    adminCodes[tempToken] = { code, expires: Date.now() + 5 * 60 * 1000 };

    const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
    const text = `üîê –í–∞—à –∫–æ–¥ –≤—Ö–æ–¥–∞: ${code}`;

    await fetch(url, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ chat_id: TELEGRAM_CHAT_ID, text })
    });

    res.json({ message: '–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram', tempToken });
  });
});

app.post('/api/admin-verify-code', (req, res) => {
  const { code, tempToken } = req.body;
  const saved = adminCodes[tempToken];

  if (!saved) return res.status(400).json({ message: '–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞' });
  if (saved.code !== code) return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥' });
  if (Date.now() > saved.expires) return res.status(400).json({ message: '–ö–æ–¥ —É—Å—Ç–∞—Ä–µ–ª' });

  delete adminCodes[tempToken];
  res.json({ message: '–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω' });
});

// –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ (–æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ)
const storage = multer.diskStorage({
  destination: (req, file, cb) => cb(null, 'uploads/'),
  filename: (req, file, cb) => cb(null, file.fieldname + '-' + Date.now() + path.extname(file.originalname))
});
const upload = multer({ storage });

// –¢–∞–±–ª–∏—Ü—ã
// 1. –°—Ç—É–¥–µ–Ω—Ç—ã
db.run(`CREATE TABLE IF NOT EXISTS medical_data (
  student_id INTEGER PRIMARY KEY,
  full_name TEXT,
  email TEXT,
  phone TEXT,
  dob TEXT,
  gender TEXT,
  occupation TEXT,
  address TEXT,
  emergency_contact TEXT,
  emergency_number TEXT,
  primary_physician TEXT,
  treatingDoctor TEXT,
  allergies TEXT,
  current_medication TEXT,
  family_history TEXT,
  past_history TEXT
)`);

// 4. –í–∏–∑–∏—Ç—ã
db.run(`CREATE TABLE IF NOT EXISTS doctor_visits (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  doctor_id INTEGER,
  student_id INTEGER,
  visit_date TEXT,
  complaints TEXT,
  is_exempted INTEGER,
  exemption_file TEXT
)`);

// 5. –ù–æ–≤–æ—Å—Ç–∏
db.run(`CREATE TABLE IF NOT EXISTS news (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  title TEXT NOT NULL,
  content TEXT NOT NULL,
  date TEXT NOT NULL,
  imageUrl TEXT
)`);

// 6. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
db.run(`CREATE TABLE IF NOT EXISTS notifications (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  curator_id INTEGER,
  student_id INTEGER,
  message TEXT NOT NULL,
  is_read INTEGER DEFAULT 0,
  created_at TEXT DEFAULT CURRENT_TIMESTAMP
)`);

// –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å–Ω–∏–º–∫–æ–≤ —Ñ–ª—é–æ—Ä–æ–≥—Ä–∞—Ñ–∏–∏
db.run(`CREATE TABLE IF NOT EXISTS xray_images (
  student_id INTEGER PRIMARY KEY,
  image_path TEXT
)`);

db.run(`CREATE TABLE IF NOT EXISTS curators (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  fio TEXT NOT NULL,
  login TEXT NOT NULL,
  email TEXT,
  password TEXT NOT NULL,
  group_name TEXT NOT NULL
)`);

/* === API === */

app.get('/api/students', (req, res) => {
  db.all('SELECT id, fio, login, email FROM students', [], (err, rows) => {
    if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤' });
    res.json(rows);
  });
});

// –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞
app.post('/api/students', async (req, res) => {
  const { fio, login, password, email } = req.body;
  if (!fio || !login || !password || !email) return res.status(400).json({ message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è' });

  try {
    const hash = await bcrypt.hash(password, 10);
    db.run("INSERT INTO students (fio, login, password, email) VALUES (?, ?, ?, ?)", [fio, login, hash, email], function(err) {
      if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞' });
      res.status(201).json({ message: '–°—Ç—É–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', studentId: this.lastID });
    });
  } catch (err) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –§–ª—é–æ—Ä–æ–≥—Ä–∞—Ñ–∏—è ‚Äî —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
app.post('/api/xray-upload', upload.single('image'), (req, res) => {
  const { studentId } = req.body;
  if (!studentId || !req.file) return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω' });

  const filePath = `/uploads/${req.file.filename}`;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Ñ–ª—é–æ—Ä–æ–≥—Ä–∞—Ñ–∏—è
  db.get("SELECT * FROM students WHERE id = ?", [studentId], (err, student) => {
    if (err || !student) return res.status(404).json({ message: '–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });

    // –û–±–Ω–æ–≤–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–¥–∏–º –æ—Ç–¥–µ–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É, –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç
    db.run(`CREATE TABLE IF NOT EXISTS xray_images (
      student_id INTEGER PRIMARY KEY,
      image_path TEXT
    )`, () => {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å
      db.run(
        `INSERT INTO xray_images (student_id, image_path)
         VALUES (?, ?)
         ON CONFLICT(student_id) DO UPDATE SET image_path = excluded.image_path`,
        [studentId, filePath],
        (err) => {
          if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—É—Ç–∏ —Å–Ω–∏–º–∫–∞' });
          res.json({ message: '–°–Ω–∏–º–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω', imageUrl: filePath });
        }
      );
    });
  });
});

// –§–ª—é–æ—Ä–æ–≥—Ä–∞—Ñ–∏—è ‚Äî –ø–æ–ª—É—á–∏—Ç—å
app.get('/api/xray/:studentId', (req, res) => {
  const studentId = req.params.studentId;
  db.get("SELECT image_path FROM xray_images WHERE student_id = ?", [studentId], (err, row) => {
    if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–Ω–∏–º–∫–∞' });
    if (!row) return res.status(404).json({ message: '–°–Ω–∏–º–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    res.json({ imageUrl: row.image_path });
  });
});

// –§–ª—é–æ—Ä–æ–≥—Ä–∞—Ñ–∏—è ‚Äî —É–¥–∞–ª–∏—Ç—å
app.delete('/api/xray/:studentId', (req, res) => {
  const studentId = req.params.studentId;
  db.get("SELECT image_path FROM xray_images WHERE student_id = ?", [studentId], (err, row) => {
    if (err || !row) return res.status(404).json({ message: '–°–Ω–∏–º–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω' });

    const fs = require('fs');
    const imagePath = path.join(__dirname, row.image_path);
    fs.unlink(imagePath, (unlinkErr) => {
      if (unlinkErr) console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', unlinkErr);

      db.run("DELETE FROM xray_images WHERE student_id = ?", [studentId], (dbErr) => {
        if (dbErr) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏' });
        res.json({ message: '–°–Ω–∏–º–æ–∫ —É–¥–∞–ª—ë–Ω' });
      });
    });
  });
});

// –ü–æ–ª—É—á–∏—Ç—å –æ–¥–Ω—É –Ω–æ–≤–æ—Å—Ç—å
app.get('/api/news/:id', (req, res) => {
  const id = req.params.id;
  db.get('SELECT * FROM news WHERE id = ?', [id], (err, row) => {
    if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    if (!row) return res.status(404).json({ message: '–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    res.json(row);
  });
});

// –û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å
app.put('/api/news/:id', upload.single('image'), (req, res) => {
  const { title, content } = req.body;
  const id = req.params.id;

  if (!title || !content) {
    return res.status(400).json({ message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è' });
  }

  const fields = ['title = ?', 'content = ?'];
  const values = [title, content];

  if (req.file) {
    const imageUrl = `/uploads/${req.file.filename}`;
    fields.push('imageUrl = ?');
    values.push(imageUrl);

    values.push(id);
    db.run(`UPDATE news SET ${fields.join(', ')} WHERE id = ?`, values, function (err) {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏:', err.message);
        return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏' });
      }
      res.json({ message: '–ù–æ–≤–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞' });
    });

  } else {
    // –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
    db.get('SELECT imageUrl FROM news WHERE id = ?', [id], (err, row) => {
      if (err || !row) {
        return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏' });
      }

      fields.push('imageUrl = ?');
      values.push(row.imageUrl); // —Ç–µ–∫—É—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞

      values.push(id);
      db.run(`UPDATE news SET ${fields.join(', ')} WHERE id = ?`, values, function (err) {
        if (err) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏:', err.message);
          return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏' });
        }
        res.json({ message: '–ù–æ–≤–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞' });
      });
    });
  }
});

// –£–¥–∞–ª–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞
app.delete('/api/students/:id', (req, res) => {
  db.run("DELETE FROM students WHERE id = ?", [req.params.id], function(err) {
    if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞' });
    if (this.changes === 0) return res.status(404).json({ message: '–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    res.json({ message: '–°—Ç—É–¥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω' });
  });
});

// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞
app.put('/api/students/:id', async (req, res) => {
  const { login, password, email } = req.body;
  const fields = [];
  const values = [];

  if (login) { fields.push("login = ?"); values.push(login); }
  if (email) { fields.push("email = ?"); values.push(email); }
  if (password) {
    const hash = await bcrypt.hash(password, 10);
    fields.push("password = ?"); values.push(hash);
  }
  if (fields.length === 0) return res.status(400).json({ message: '–ù–µ—Ç –ø–æ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' });

  values.push(req.params.id);
  db.run(`UPDATE students SET ${fields.join(', ')} WHERE id = ?`, values, function(err) {
    if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏' });
    if (this.changes === 0) return res.status(404).json({ message: '–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    res.json({ message: '–û–±–Ω–æ–≤–ª–µ–Ω–æ' });
  });
});

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–∞
app.post('/api/student-login', (req, res) => {
  const { login, password } = req.body;
  if (!login || !password) return res.status(400).json({ message: '–£–∫–∞–∂–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å' });

  db.get("SELECT * FROM students WHERE login = ?", [login], async (err, row) => {
    if (err || !row) return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    const match = await bcrypt.compare(password, row.password);
    if (!match) return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    res.json({ message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞', studentId: row.id, fio: row.fio, email: row.email });
  });
});

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—Ä–∞—á–∞
app.post('/api/doctor-login', (req, res) => {
  const { login, password } = req.body;
  db.get("SELECT * FROM doctors WHERE login = ?", [login], async (err, row) => {
    if (err || !row) return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    const match = await bcrypt.compare(password, row.password);
    if (!match) return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    res.json({ message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤—Ä–∞—á–∞ —É—Å–ø–µ—à–Ω–∞', doctorId: row.id, fio: row.fio, email: row.email, specialization: row.specialization });
  });
});

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Ä–∞—á–µ–π
app.get('/api/doctors', (req, res) => {
  db.all('SELECT id, fio, login, email FROM doctors', [], (err, rows) => {
    if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞' });
    res.json(rows);
  });
});


// –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–∞—á–∞
app.post('/api/doctors', async (req, res) => {
  const { fio, login, password, email } = req.body;
  if (!fio || !login || !password || !email) {
    return res.status(400).json({ message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }

  try {
    const hash = await bcrypt.hash(password, 10);
    db.run(
      'INSERT INTO doctors (fio, login, password, email) VALUES (?, ?, ?, ?)',
      [fio, login, hash, email],
      function(err) {
        if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤—Ä–∞—á–∞' });
        res.json({ message: '–í—Ä–∞—á –¥–æ–±–∞–≤–ª–µ–Ω', id: this.lastID });
      }
    );
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä–æ–ª—è –≤—Ä–∞—á–∞:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.delete('/api/doctors/:id', (req, res) => {
  const id = req.params.id;
  db.run('DELETE FROM doctors WHERE id = ?', [id], function (err) {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–∞—á–∞:', err);
      return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–∞—á–∞' });
    }
    res.json({ message: '–í—Ä–∞—á —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω' });
  });
});


// –°–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ + –∞–Ω–∫–µ—Ç–∞
app.get('/api/students-list', (req, res) => {
  const sql = `SELECT s.id, s.fio, md.occupation AS group_name FROM students s LEFT JOIN medical_data md ON s.id = md.student_id`;
  db.all(sql, (err, rows) => {
    if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤' });
    res.json(rows);
  });
});

app.get('/api/doctor-dashboard-stats/:id', (req, res) => {
  const doctorId = req.params.id;

  const stats = {
    students: 0,
    forms: 0,
    visits: 0
  };

  db.get("SELECT COUNT(*) as count FROM students", (err, row1) => {
    if (err) return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤" });
    stats.students = row1.count;

    db.get("SELECT COUNT(*) as count FROM medical_data", (err, row2) => {
      if (err) return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∫–µ—Ç" });
      stats.forms = row2.count;

      db.get("SELECT COUNT(*) as count FROM doctor_visits WHERE doctor_id = ?", [doctorId], (err, row3) => {
        if (err) return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∏–∑–∏—Ç–æ–≤" });
        stats.visits = row3.count;

        res.json(stats);
      });
    });
  });
});

// –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∞–Ω–∫–µ—Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞
app.get('/api/medical-data/:studentId', (req, res) => {
  db.get("SELECT * FROM medical_data WHERE student_id = ?", [req.params.studentId], (err, row) => {
    if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã' });
    if (!row) return res.status(404).json({ message: '–ê–Ω–∫–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    res.json(row);
  });
});

// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∫–µ—Ç—É
app.post('/api/medical-data', (req, res) => {
  const data = req.body;
  const fields = Object.keys(data).filter(key => key !== 'id'); // –∏—Å–∫–ª—é—á–∏–º id
  const placeholders = fields.map(() => '?').join(', ');
  const values = fields.map(k => data[k]);

  const updateClause = fields.map(f => `${f} = excluded.${f}`).join(', ');

  db.run(`
    INSERT INTO medical_data (${fields.join(', ')})
    VALUES (${placeholders})
    ON CONFLICT(student_id) DO UPDATE SET ${updateClause}
  `, values, function(err) {
    if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö' });
    res.json({ message: '–ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞' });
  });
});


// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∏–∑–∏—Ç –∫ –≤—Ä–∞—á—É
app.post('/api/doctor-visits', upload.single('exemptionFile'), (req, res) => {
  const { doctorId, studentId, visitDate, complaints, isExempted } = req.body;
  if (!doctorId || !studentId || !visitDate || !complaints) 
    return res.status(400).json({ message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è' });

  const exemptionFilePath = (isExempted == '1' && req.file)
    ? `/uploads/${req.file.filename}`
    : null;
  if (isExempted == '1' && !req.file)
    return res.status(400).json({ message: '–§–∞–π–ª –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∏–∑–∏—Ç
  db.run(
    `INSERT INTO doctor_visits
      (doctor_id, student_id, visit_date, complaints, is_exempted, exemption_file)
     VALUES (?, ?, ?, ?, ?, ?)`,
    [doctorId, studentId, visitDate, complaints, isExempted == '1' ? 1 : 0, exemptionFilePath],
    function(err) {
      if (err) 
        return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤–∏–∑–∏—Ç–∞' });

      const visitId = this.lastID;

      // –ü–æ–ª—É—á–∞–µ–º –§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞
      db.get('SELECT fio FROM students WHERE id = ?', [studentId], (err, studRow) => {
        const studentName = studRow ? studRow.fio : `#${studentId}`;

        // –ò—â–µ–º –≥—Ä—É–ø–ø—É –≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –∞–Ω–∫–µ—Ç–µ
        db.get(
          'SELECT occupation AS group_name FROM medical_data WHERE student_id = ?',
          [studentId],
          (err, mdRow) => {
            if (mdRow && mdRow.group_name) {
              // –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ—Ö –∫—É—Ä–∞—Ç–æ—Ä–æ–≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
              db.all(
                'SELECT id FROM curators WHERE group_name = ?',
                [mdRow.group_name],
                (err, curRows) => {
                  curRows.forEach(cur => {
                    const msg = `–°—Ç—É–¥–µ–Ω—Ç ${studentName} –ø–æ—Å–µ—Ç–∏–ª –≤—Ä–∞—á–∞ –ø–æ –ø—Ä–∏—á–∏–Ω–µ "${complaints}"`;
                    db.run(
                      'INSERT INTO notifications (curator_id, student_id, message) VALUES (?, ?, ?)',
                      [cur.id, studentId, msg]
                    );
                  });
                }
              );
            }
          }
        );
      });

      res.status(201).json({ message: '–í–∏–∑–∏—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω', visitId });
    }
  );
});

app.get('/api/doctor-visits/doctor/:doctorId', (req, res) => {
  const doctorId = req.params.doctorId;
  db.all(`
    SELECT dv.visit_date, dv.complaints, dv.exemption_file, s.fio AS student_name
    FROM doctor_visits dv
    JOIN students s ON dv.student_id = s.id
    WHERE dv.doctor_id = ?
    ORDER BY dv.visit_date DESC
  `, [doctorId], (err, rows) => {
    if (err) return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–∑–∏—Ç–æ–≤" });
    res.json(rows);
  });
});

// –ü–æ–ª—É—á–∏—Ç—å –≤–∏–∑–∏—Ç—ã —Å—Ç—É–¥–µ–Ω—Ç–∞
app.get('/api/doctor-visits/student/:studentId', (req, res) => {
  const sql = `SELECT dv.*, d.fio AS doctor_name FROM doctor_visits dv JOIN doctors d ON dv.doctor_id = d.id WHERE dv.student_id = ? ORDER BY dv.visit_date DESC`;
  db.all(sql, [req.params.studentId], (err, rows) => {
    if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∏–∑–∏—Ç–æ–≤' });
    res.json(rows);
  });
});

// –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞
app.get('/api/notifications/:curatorId', (req, res) => {
  const curatorId = req.params.curatorId;
  db.all(
    'SELECT * FROM notifications WHERE curator_id = ? ORDER BY created_at DESC',
    [curatorId],
    (err, rows) => {
      if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' });
      res.json(rows);
    }
  );
});

// –û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
app.post('/api/notifications/:id/read', (req, res) => {
  db.run(
    'UPDATE notifications SET is_read = 1 WHERE id = ?',
    [req.params.id],
    err => {
      if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' });
      res.sendStatus(200);
    }
  );
});

// –ù–æ–≤–æ—Å—Ç–∏
app.post('/api/news', upload.single('image'), (req, res) => {
  const { title, content } = req.body;
  if (!title || !content) return res.status(400).json({ message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –Ω–æ–≤–æ—Å—Ç–∏' });
  const imageUrl = req.file ? `/uploads/${req.file.filename}` : null;
  const date = new Date().toISOString();
  db.run(`INSERT INTO news (title, content, date, imageUrl) VALUES (?, ?, ?, ?)`, [title, content, date, imageUrl], function(err) {
    if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏' });
    res.status(201).json({ message: '–ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞', newsId: this.lastID });
  });
});

app.put('/api/news/:id/simple', (req, res) => {
  const { title, content } = req.body;
  const id = req.params.id;

  if (!title || !content) {
    return res.status(400).json({ message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è' });
  }

  db.run(`UPDATE news SET title = ?, content = ? WHERE id = ?`, [title, content, id], function(err) {
    if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏' });
    res.json({ message: '–ù–æ–≤–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞' });
  });
});


app.get('/api/news', (req, res) => {
  db.all("SELECT * FROM news ORDER BY date DESC", (err, rows) => {
    if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–µ–π' });
    res.json(rows);
  });
});

app.put('/api/news/:id', upload.single('image'), (req, res) => {
  const { title, content } = req.body;
  const id = req.params.id;

  if (!title || !content) {
    return res.status(400).json({ message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è' });
  }

  const fields = ['title = ?', 'content = ?'];
  const values = [title, content];

  if (req.file) {
    const imageUrl = `/uploads/${req.file.filename}`;
    fields.push('imageUrl = ?');
    values.push(imageUrl);
  }

  values.push(id);

  db.run(`UPDATE news SET ${fields.join(', ')} WHERE id = ?`, values, function(err) {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏:', err.message); // –¥–æ–±–∞–≤—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É
      return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏' });
    }
    res.json({ message: '–ù–æ–≤–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞' });
  });
});

// –£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å
app.delete('/api/news/:id', (req, res) => {
  const id = req.params.id;
  db.run('DELETE FROM news WHERE id = ?', [id], function(err) {
    if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏' });
    if (this.changes === 0) return res.status(404).json({ message: '–ù–æ–≤–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    res.json({ message: '–ù–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞' });
  });
});

// –ü—Ä–æ—Ñ–∏–ª—å —Å—Ç—É–¥–µ–Ω—Ç–∞
app.get('/api/student-profile/:id', (req, res) => {
  const sql = `
    SELECT s.fio, md.occupation AS group_name, md.faculty
    FROM students s
    LEFT JOIN medical_data md ON s.id = md.student_id
    WHERE s.id = ?
  `;
  db.get(sql, [req.params.id], (err, row) => {
    if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è' });
    if (!row) return res.status(404).json({ message: '–°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    res.json(row);
  });
});

// –ö—É—Ä–∞—Ç–æ—Ä ‚Äî –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
app.post('/api/curator-login', (req, res) => {
  const { login, password } = req.body;
  db.get("SELECT * FROM curators WHERE login = ?", [login], async (err, row) => {
    if (err || !row) return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
    const match = await bcrypt.compare(password, row.password);
    if (!match) return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });

    res.json({
      message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞',
      curatorId: row.id,
      fio: row.fio,
      group: row.group_name
    });
  });
});

app.get('/api/curator/xray/:group', (req, res) => {
  const group = req.params.group;
  const sql = `
    SELECT s.fio, xi.image_path 
    FROM students s 
    JOIN medical_data md ON s.id = md.student_id
    JOIN xray_images xi ON s.id = xi.student_id
    WHERE md.occupation = ?
  `;
  db.all(sql, [group], (err, rows) => {
    if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–Ω–∏–º–∫–æ–≤' });
    res.json(rows);
  });
});

// –ü–æ–ª—É—á–∏—Ç—å —Å–Ω–∏–º–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∫—É—Ä–∞—Ç–æ—Ä–∞
app.get('/api/curator/students/:groupName', (req, res) => {
  const group = req.params.groupName;

  const sql = `
    SELECT s.id, s.fio, xi.image_path
    FROM students s
    JOIN medical_data md ON s.id = md.student_id
    LEFT JOIN xray_images xi ON s.id = xi.student_id
    WHERE md.occupation = ?
  `;

  db.all(sql, [group], (err, rows) => {
    if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤' });
    res.json(rows);
  });
});

// === –ö—É—Ä–∞—Ç–æ—Ä—ã ===
// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤
app.get('/api/curators', (req, res) => {
  db.all('SELECT id, fio, login, email, group_name FROM curators', (err, rows) => {
    if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä–∞—Ç–æ—Ä–æ–≤' });
    res.json(rows);
  });
});

// –î–æ–±–∞–≤–∏—Ç—å –∫—É—Ä–∞—Ç–æ—Ä–∞
app.post('/api/curators', async (req, res) => {
  const { fio, login, email, password, group_name } = req.body;
  console.log('POST /api/curators body:', req.body);
  if (!fio || !login || !email || !password || !group_name) {
    return res.status(400).json({ message: '–í—Å–µ –ø–æ–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }
  try {
    const hash = await bcrypt.hash(password, 10);
    db.run(
      'INSERT INTO curators (fio, login, password, email, group_name) VALUES (?, ?, ?, ?, ?)',
      [fio, login, hash, email, group_name],
      function(err) {
        if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫—É—Ä–∞—Ç–æ—Ä–∞' });
        res.setHeader('Content-Type', 'application/json');
        res.json({ message: '–ö—É—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω', id: this.lastID });
      }
    );
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫—É—Ä–∞—Ç–æ—Ä–∞:', err);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.delete('/api/curators/:id', (req, res) => {
  const id = req.params.id;
  db.run('DELETE FROM curators WHERE id = ?', [id], function (err) {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫—É—Ä–∞—Ç–æ—Ä–∞:', err);
      return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫—É—Ä–∞—Ç–æ—Ä–∞' });
    }
    res.json({ message: '–ö—É—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω' });
  });
});
app.put('/api/curators/:id', async (req, res) => {
  const id = req.params.id;
  const { login, email, password, group_name } = req.body;

  if (!login || !email || !group_name) {
    return res.status(400).json({ message: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç' });
  }

  const updateFields = [];
  const values = [];

  if (login) { updateFields.push("login = ?"); values.push(login); }
  if (email) { updateFields.push("email = ?"); values.push(email); }
  if (group_name) { updateFields.push("group_name = ?"); values.push(group_name); }

  if (password) {
    try {
      const hashed = await bcrypt.hash(password, 10);
      updateFields.push("password = ?");
      values.push(hashed);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä–æ–ª—è –∫—É—Ä–∞—Ç–æ—Ä–∞:", err);
      return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ä–æ–ª—è' });
    }
  }

  values.push(id);

  db.run(
    `UPDATE curators SET ${updateFields.join(", ")} WHERE id = ?`,
    values,
    function(err) {
      if (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä–∞—Ç–æ—Ä–∞:', err);
        return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è' });
      }
      res.json({ message: '–ö—É—Ä–∞—Ç–æ—Ä –æ–±–Ω–æ–≤–ª—ë–Ω' });
    }
  );
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø–∞—Ä–æ–ª—è
function isStrongPassword(password) {
  return (
    password.length >= 8 &&
    /[A-Z]/.test(password) &&     // –∑–∞–≥–ª–∞–≤–Ω–∞—è –±—É–∫–≤–∞
    /[a-z]/.test(password) &&     // —Å—Ç—Ä–æ—á–Ω–∞—è –±—É–∫–≤–∞
    /\d/.test(password) &&        // —Ü–∏—Ñ—Ä–∞
    /[\W_]/.test(password)        // —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª
  );
}

// –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –¥–ª—è –≤—Å–µ—Ö —Ä–æ–ª–µ–π
app.post('/api/change-password', async (req, res) => {
  const { role, id, oldPassword, newPassword } = req.body;
  const table = role === 'student' ? 'students' :
                role === 'doctor' ? 'doctors' :
                role === 'curator' ? 'curators' : null;

  if (!table) return res.status(400).json({ message: '–ù–µ–≤–µ—Ä–Ω–∞—è —Ä–æ–ª—å' });

  if (!isStrongPassword(newPassword)) {
    return res.status(400).json({
      message: '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤, —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É, —Å—Ç—Ä–æ—á–Ω—É—é –±—É–∫–≤—É, —Ü–∏—Ñ—Ä—É –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª'
    });
  }

  db.get(`SELECT password FROM ${table} WHERE id = ?`, [id], (err, row) => {
    if (err || !row) return res.status(400).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });

    bcrypt.compare(oldPassword, row.password, (err, match) => {
      if (!match) return res.status(400).json({ message: '–°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–µ–Ω' });

      bcrypt.hash(newPassword, 10, (err, hashedPassword) => {
        if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä–æ–ª—è' });

        db.run(`UPDATE ${table} SET password = ? WHERE id = ?`, [hashedPassword, id], err => {
          if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è' });
          res.json({ message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω' });
        });
      });
    });
  });
});
// –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∫—É—Ä–∞—Ç–æ—Ä–∞
app.post('/api/assign-student', express.json(), (req, res) => {
  const { curatorId, studentId } = req.body;
  if (!curatorId || !studentId) {
    return res.status(400).json({ message: '–ù–µ —É–∫–∞–∑–∞–Ω curatorId –∏–ª–∏ studentId' });
  }
  // –ù–∞—Ö–æ–¥–∏–º –≥—Ä—É–ø–ø—É –∫—É—Ä–∞—Ç–æ—Ä–∞
  db.get(
    'SELECT group_name FROM curators WHERE id = ?',
    [curatorId],
    (err, row) => {
      if (err || !row) return res.status(400).json({ message: '–ö—É—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      const group = row.group_name;
      // –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
      db.run(
        'UPDATE medical_data SET occupation = ? WHERE student_id = ?',
        [group, studentId],
        function(err) {
          if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏' });
          if (this.changes === 0) {
            // –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ –±—ã–ª–æ ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é
            db.run(
              'INSERT INTO medical_data (student_id, occupation) VALUES (?, ?)',
              [studentId, group],
              err2 => {
                if (err2) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏' });
                res.json({ message: '–°—Ç—É–¥–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –≥—Ä—É–ø–ø—É' });
              }
            );
          } else {
            res.json({ message: '–°—Ç—É–¥–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à—É –≥—Ä—É–ø–ø—É' });
          }
        }
      );
    }
  );
});

app.put('/api/doctors/:id', async (req, res) => {
  const id = req.params.id;
  const { login, email, password } = req.body;

  if (!login || !email) {
    return res.status(400).json({ message: '–û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç' });
  }

  const updateFields = [];
  const values = [];

  if (login) { updateFields.push("login = ?"); values.push(login); }
  if (email) { updateFields.push("email = ?"); values.push(email); }

  if (password) {
    try {
      const hashedPassword = await bcrypt.hash(password, 10);
      updateFields.push("password = ?");
      values.push(hashedPassword);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–∞—Ä–æ–ª—è:", err);
      return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞—Ä–æ–ª—è' });
    }
  }

  values.push(id);

  db.run(
    `UPDATE doctors SET ${updateFields.join(", ")} WHERE id = ?`,
    values,
    function (err) {
      if (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–∞—á–∞:", err);
        return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–∞—á–∞' });
      }
      res.json({ message: '–î–∞–Ω–Ω—ã–µ –≤—Ä–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã' });
    }
  );
});

const fs = require('fs');

app.get('/', (req, res) => {
  const filePath = path.join(__dirname, 'login.html');
  fs.readFile(filePath, (err, data) => {
    if (err) return res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
    res.setHeader('Content-Type', 'text/html');
    res.send(data);
  });
});
// –ü–æ–∏—Å–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ –§–ò–û, —É –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã –≤ medical_data
app.get('/api/search-students', (req, res) => {
  const q = (req.query.q || '').trim();
  if (!q) return res.json([]);
  db.all(
    `SELECT id, fio 
     FROM students 
     WHERE fio LIKE ? 
       AND id NOT IN (SELECT student_id FROM medical_data)
     LIMIT 10`,
    [`%${q}%`],
    (err, rows) => {
      if (err) return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤' });
      res.json(rows);
    }
  );
});


// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
const PORT = 3000;
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
